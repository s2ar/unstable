// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/opendota/service.go

// Package opendota is a generated GoMock package.
package opendota

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpendota is a mock of Opendota interface.
type MockOpendota struct {
	ctrl     *gomock.Controller
	recorder *MockOpendotaMockRecorder
}

// MockOpendotaMockRecorder is the mock recorder for MockOpendota.
type MockOpendotaMockRecorder struct {
	mock *MockOpendota
}

// NewMockOpendota creates a new mock instance.
func NewMockOpendota(ctrl *gomock.Controller) *MockOpendota {
	mock := &MockOpendota{ctrl: ctrl}
	mock.recorder = &MockOpendotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpendota) EXPECT() *MockOpendotaMockRecorder {
	return m.recorder
}

// AddTeams mocks base method.
func (m *MockOpendota) AddTeams() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeams")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeams indicates an expected call of AddTeams.
func (mr *MockOpendotaMockRecorder) AddTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeams", reflect.TypeOf((*MockOpendota)(nil).AddTeams))
}

// GetTopTeam mocks base method.
func (m *MockOpendota) GetTopTeam() (*Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopTeam")
	ret0, _ := ret[0].(*Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopTeam indicates an expected call of GetTopTeam.
func (mr *MockOpendotaMockRecorder) GetTopTeam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopTeam", reflect.TypeOf((*MockOpendota)(nil).GetTopTeam))
}
