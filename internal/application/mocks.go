// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/app.go

// Package application is a generated GoMock package.
package application

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/s2ar/unstable/config"
	repository "github.com/s2ar/unstable/internal/repository"
	opendota "github.com/s2ar/unstable/internal/repository/opendota"
	opendota0 "github.com/s2ar/unstable/internal/service/opendota"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockApplication) Config() *config.Configuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Configuration)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockApplicationMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockApplication)(nil).Config))
}

// Connection mocks base method.
func (m *MockApplication) Connection() *repository.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*repository.DB)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockApplicationMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockApplication)(nil).Connection))
}

// RepositoryOpendota mocks base method.
func (m *MockApplication) RepositoryOpendota() opendota.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryOpendota")
	ret0, _ := ret[0].(opendota.Repository)
	return ret0
}

// RepositoryOpendota indicates an expected call of RepositoryOpendota.
func (mr *MockApplicationMockRecorder) RepositoryOpendota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryOpendota", reflect.TypeOf((*MockApplication)(nil).RepositoryOpendota))
}

// ServiceOpendota mocks base method.
func (m *MockApplication) ServiceOpendota() opendota0.MockOpendota {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceOpendota")
	ret0, _ := ret[0].(opendota0.MockOpendota)
	return ret0
}

// ServiceOpendota indicates an expected call of ServiceOpendota.
func (mr *MockApplicationMockRecorder) ServiceOpendota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceOpendota", reflect.TypeOf((*MockApplication)(nil).ServiceOpendota))
}
